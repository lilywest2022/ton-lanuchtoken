#pragma version =0.4.4;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "bugs_Issue211.headers.fc";
#include "bugs_Issue211.stdlib.fc";
#include "bugs_Issue211.constants.fc";
#include "bugs_Issue211.storage.fc";

;;
;; Contract Issue211 functions
;;

(slice) $Issue211$_contract_init() impure inline_ref {
    var (($self's)) = (null());
    $self's = $Cell$_fun_asSlice(end_cell(store_uint(store_uint(begin_cell(), 3, 2), 1, 2)));
    return ($self's);
}

(int, int) $Int$_fun_multiply(int $self, int $x) impure inline_ref {
    var ($self) = $self;
    $self = $self * $x;
    return ($self, $self);
}

int $Int$_fun_multiply$not_mut(int $self, int $x) impure inline_ref {
    return $self~$Int$_fun_multiply($x);
}

((slice), int) $Issue211$_fun_test1((slice) $self) impure inline_ref {
    var (($self's)) = $self;
    int $x = load_uint$not_mut(begin_parse(end_cell(store_uint(begin_cell(), 0, 1))), 1);
    return (($self's), $x);
}

((slice), int) $Issue211$_fun_test2((slice) $self) impure inline_ref {
    var (($self's)) = $self;
    cell $y = end_cell(store_uint(begin_cell(), 0, 1));
    slice $x = begin_parse(end_cell(store_uint(begin_cell(), load_uint$not_mut(begin_parse($y), 1), 1)));
    return (($self's), $x~load_uint(1));
}

((slice), int) $Issue211$_fun_test3((slice) $self) impure inline_ref {
    var (($self's)) = $self;
    int $x = 3;
    $x~$Int$_fun_multiply(2);
    return (($self's), $x);
}

((slice), int) $Issue211$_fun_test4((slice) $self) impure inline_ref {
    var (($self's)) = $self;
    int $x = 3;
    return (($self's), $Int$_fun_multiply$not_mut($x~$Int$_fun_multiply(2), 4));
}

((slice), int) $Issue211$_fun_test5((slice) $self) impure inline_ref {
    var (($self's)) = $self;
    return (($self's), load_uint$not_mut(__tact_str_to_slice(__gen_slice_string_55e960f1409af0d7670e382c61276a559fa9330185984d91faffebf32d5fa383()), 8));
}

((slice), ()) $Issue211$_fun_test6((slice) $self) impure inline_ref {
    var (($self's)) = $self;
    load_ref$not_mut($global_emptySlice());
    return (($self's), ());
}

((slice), int) $Issue211$_fun_test7((slice) $self) impure inline_ref {
    var (($self's)) = $self;
    return (($self's), load_int$not_mut($Builder$_fun_asSlice(store_int(begin_cell(), 42, 7)), 7));
}

((slice), int) $Issue211$_fun_test8((slice) $self) impure inline_ref {
    var (($self's)) = $self;
    var ($foo's) = $Foo$_constructor_s($Cell$_fun_asSlice(end_cell(store_uint(store_uint(begin_cell(), 3, 2), 1, 2))));
    $foo's~load_bits(1);
    return (($self's), $foo's~load_uint(3));
}

((slice), int) $Issue211$_fun_test9((slice) $self) impure inline_ref {
    var (($self's)) = $self;
    $self's~load_uint(1);
    return (($self's), $self's~load_uint(3));
}

;;
;; Receivers of a Contract Issue211
;;

(((slice)), ()) %$Issue211$_internal_empty((slice) $self) impure inline {
    var ($self's) = $self;
    return (($self's), ());
}

;;
;; Get methods of a Contract Issue211
;;

_ %test1() method_id(70304) {
    var self = $Issue211$_contract_load();
    var res = self~$Issue211$_fun_test1();
    return res;
}

_ %test2() method_id(74435) {
    var self = $Issue211$_contract_load();
    var res = self~$Issue211$_fun_test2();
    return res;
}

_ %test3() method_id(78562) {
    var self = $Issue211$_contract_load();
    var res = self~$Issue211$_fun_test3();
    return res;
}

_ %test4() method_id(82437) {
    var self = $Issue211$_contract_load();
    var res = self~$Issue211$_fun_test4();
    return res;
}

_ %test5() method_id(86564) {
    var self = $Issue211$_contract_load();
    var res = self~$Issue211$_fun_test5();
    return res;
}

_ %test6() method_id(90695) {
    var self = $Issue211$_contract_load();
    var res = self~$Issue211$_fun_test6();
    return res;
}

_ %test7() method_id(94822) {
    var self = $Issue211$_contract_load();
    var res = self~$Issue211$_fun_test7();
    return res;
}

_ %test8() method_id(99209) {
    var self = $Issue211$_contract_load();
    var res = self~$Issue211$_fun_test8();
    return res;
}

_ %test9() method_id(103336) {
    var self = $Issue211$_contract_load();
    var res = self~$Issue211$_fun_test9();
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.debug.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmPU62MVvLLWHu4yys2JyfGCKhm1qph4tgaEWDYWTi9iDx";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract Issue211
;;

((slice), int) $Issue211$_contract_router_internal((slice) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive empty message
    if ((op == 0) & (slice_bits(in_msg) <= 32)) {
        self~%$Issue211$_internal_empty();
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $Issue211$_contract_load();
    
    ;; Handle operation
    int handled = self~$Issue211$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $Issue211$_contract_store(self);
}
