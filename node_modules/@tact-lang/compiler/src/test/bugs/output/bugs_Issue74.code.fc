#pragma version =0.4.4;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "bugs_Issue74.headers.fc";
#include "bugs_Issue74.stdlib.fc";
#include "bugs_Issue74.storage.fc";

;;
;; Contract Issue74 functions
;;

tuple $Issue74$_contract_init() impure inline_ref {
    tuple $self = null();
    return $self;
}

;;
;; Receivers of a Contract Issue74
;;

(tuple, ()) $Issue74$_internal_text_47c73ac587d8b1afb158f4748d870c56e5210e421f5d7e17393da9a321faf23e(tuple $self) impure inline {
    var $self = $self;
    $global_send($SendParameters$_constructor_to_value_bounce_mode_body($Context$_get_sender(__tact_context_get()), 0, false, 2, $MyMessage$_store_cell($MyMessage$_constructor_())));
    return ($self, ());
}

;;
;; Get methods of a Contract Issue74
;;

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.debug.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmexwMmnDaEkCrKeQo42U8S3hsMsHmPCLotahDaXN2t7Zz";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract Issue74
;;

(tuple, int) $Issue74$_contract_router_internal(tuple self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        
        ;; Receive "send" message
        if (text_op == 0x47c73ac587d8b1afb158f4748d870c56e5210e421f5d7e17393da9a321faf23e) {
            self~$Issue74$_internal_text_47c73ac587d8b1afb158f4748d870c56e5210e421f5d7e17393da9a321faf23e();
            return (self, true);
        }
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $Issue74$_contract_load();
    
    ;; Handle operation
    int handled = self~$Issue74$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $Issue74$_contract_store(self);
}
