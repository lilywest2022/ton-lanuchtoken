;;
;; Type: Context
;; TLB: _ bounced:bool sender:address value:int257 raw:^slice = Context
;;

_ $Context$_get_sender((int, slice, int, slice) v) inline {
    var (v'bounced, v'sender, v'value, v'raw) = v;
    return v'sender;
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_mode_body(slice to, int value, int bounce, int mode, cell body) inline {
    return (bounce, to, value, mode, body, null(), null());
}

;;
;; Type: MyMessage
;; Header: 0x7f23a0d2
;; TLB: my_message#7f23a0d2  = MyMessage
;;

builder $MyMessage$_store(builder build_0, tuple v) inline {
    build_0 = store_uint(build_0, 2133041362, 32);
    return build_0;
}

cell $MyMessage$_store_cell(tuple v) inline {
    return $MyMessage$_store(begin_cell(), v).end_cell();
}

(tuple) $MyMessage$_constructor_() inline {
    return empty_tuple();
}

;;
;; Type: Issue74
;;

tuple $Issue74$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return null();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        return $Issue74$_contract_init();
    }
}

() $Issue74$_contract_store(tuple v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    set_data(b.end_cell());
}