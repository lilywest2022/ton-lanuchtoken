#pragma version =0.4.4;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "optionals_Opt4.headers.fc";
#include "optionals_Opt4.stdlib.fc";
#include "optionals_Opt4.storage.fc";

;;
;; Contract Opt4 functions
;;

(int) $Opt4$_contract_init() impure inline_ref {
    var (($self'z)) = (0);
    return ($self'z);
}

((int), int) $Opt4$_fun_z((int) $self) impure inline_ref {
    var (($self'z)) = $self;
    return (($self'z), $self'z);
}

;;
;; Receivers of a Contract Opt4
;;

(((int)), ()) %$Opt4$_internal_empty((int) $self) impure inline {
    var ($self'z) = $self;
    return (($self'z), ());
}

(((int)), ()) $Opt4$_internal_binary_OptAddr((int) $self, (int, slice, int) $msg) impure inline {
    var ($self'z) = $self;
    var ($msg'x, $msg'y, $msg'z) = $msg;
    $self'z = $msg'z;
    return (($self'z), ());
}

;;
;; Get methods of a Contract Opt4
;;

_ %z() method_id(122845) {
    var self = $Opt4$_contract_load();
    var res = self~$Opt4$_fun_z();
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.debug.v0"H >> 128,
        "org.ton.chain.any.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmcccfjUDgi554FaDkngqWWUDk5vkBCgP9f9XKUpXkbYRP";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract Opt4
;;

((int), int) $Opt4$_contract_router_internal((int) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive empty message
    if ((op == 0) & (slice_bits(in_msg) <= 32)) {
        self~%$Opt4$_internal_empty();
        return (self, true);
    }
    
    ;; Receive OptAddr message
    if (op == 3353994340) {
        var msg = in_msg~$OptAddr$_load();
        self~$Opt4$_internal_binary_OptAddr(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $Opt4$_contract_load();
    
    ;; Handle operation
    int handled = self~$Opt4$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $Opt4$_contract_store(self);
}
