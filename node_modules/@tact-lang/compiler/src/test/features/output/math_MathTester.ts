import { 
    Cell,
    Slice, 
    Address, 
    Builder, 
    beginCell, 
    ComputeError, 
    TupleItem, 
    TupleReader, 
    Dictionary, 
    contractAddress, 
    ContractProvider, 
    Sender, 
    Contract, 
    ContractABI, 
    ABIType,
    ABIGetter,
    ABIReceiver,
    TupleBuilder,
    DictionaryValue
} from '@ton/core';

export type StateInit = {
    $$type: 'StateInit';
    code: Cell;
    data: Cell;
}

export function storeStateInit(src: StateInit) {
    return (builder: Builder) => {
        let b_0 = builder;
        b_0.storeRef(src.code);
        b_0.storeRef(src.data);
    };
}

export function loadStateInit(slice: Slice) {
    let sc_0 = slice;
    let _code = sc_0.loadRef();
    let _data = sc_0.loadRef();
    return { $$type: 'StateInit' as const, code: _code, data: _data };
}

function loadTupleStateInit(source: TupleReader) {
    let _code = source.readCell();
    let _data = source.readCell();
    return { $$type: 'StateInit' as const, code: _code, data: _data };
}

function storeTupleStateInit(source: StateInit) {
    let builder = new TupleBuilder();
    builder.writeCell(source.code);
    builder.writeCell(source.data);
    return builder.build();
}

function dictValueParserStateInit(): DictionaryValue<StateInit> {
    return {
        serialize: (src, builder) => {
            builder.storeRef(beginCell().store(storeStateInit(src)).endCell());
        },
        parse: (src) => {
            return loadStateInit(src.loadRef().beginParse());
        }
    }
}

export type Context = {
    $$type: 'Context';
    bounced: boolean;
    sender: Address;
    value: bigint;
    raw: Cell;
}

export function storeContext(src: Context) {
    return (builder: Builder) => {
        let b_0 = builder;
        b_0.storeBit(src.bounced);
        b_0.storeAddress(src.sender);
        b_0.storeInt(src.value, 257);
        b_0.storeRef(src.raw);
    };
}

export function loadContext(slice: Slice) {
    let sc_0 = slice;
    let _bounced = sc_0.loadBit();
    let _sender = sc_0.loadAddress();
    let _value = sc_0.loadIntBig(257);
    let _raw = sc_0.loadRef();
    return { $$type: 'Context' as const, bounced: _bounced, sender: _sender, value: _value, raw: _raw };
}

function loadTupleContext(source: TupleReader) {
    let _bounced = source.readBoolean();
    let _sender = source.readAddress();
    let _value = source.readBigNumber();
    let _raw = source.readCell();
    return { $$type: 'Context' as const, bounced: _bounced, sender: _sender, value: _value, raw: _raw };
}

function storeTupleContext(source: Context) {
    let builder = new TupleBuilder();
    builder.writeBoolean(source.bounced);
    builder.writeAddress(source.sender);
    builder.writeNumber(source.value);
    builder.writeSlice(source.raw);
    return builder.build();
}

function dictValueParserContext(): DictionaryValue<Context> {
    return {
        serialize: (src, builder) => {
            builder.storeRef(beginCell().store(storeContext(src)).endCell());
        },
        parse: (src) => {
            return loadContext(src.loadRef().beginParse());
        }
    }
}

export type SendParameters = {
    $$type: 'SendParameters';
    bounce: boolean;
    to: Address;
    value: bigint;
    mode: bigint;
    body: Cell | null;
    code: Cell | null;
    data: Cell | null;
}

export function storeSendParameters(src: SendParameters) {
    return (builder: Builder) => {
        let b_0 = builder;
        b_0.storeBit(src.bounce);
        b_0.storeAddress(src.to);
        b_0.storeInt(src.value, 257);
        b_0.storeInt(src.mode, 257);
        if (src.body !== null && src.body !== undefined) { b_0.storeBit(true).storeRef(src.body); } else { b_0.storeBit(false); }
        if (src.code !== null && src.code !== undefined) { b_0.storeBit(true).storeRef(src.code); } else { b_0.storeBit(false); }
        if (src.data !== null && src.data !== undefined) { b_0.storeBit(true).storeRef(src.data); } else { b_0.storeBit(false); }
    };
}

export function loadSendParameters(slice: Slice) {
    let sc_0 = slice;
    let _bounce = sc_0.loadBit();
    let _to = sc_0.loadAddress();
    let _value = sc_0.loadIntBig(257);
    let _mode = sc_0.loadIntBig(257);
    let _body = sc_0.loadBit() ? sc_0.loadRef() : null;
    let _code = sc_0.loadBit() ? sc_0.loadRef() : null;
    let _data = sc_0.loadBit() ? sc_0.loadRef() : null;
    return { $$type: 'SendParameters' as const, bounce: _bounce, to: _to, value: _value, mode: _mode, body: _body, code: _code, data: _data };
}

function loadTupleSendParameters(source: TupleReader) {
    let _bounce = source.readBoolean();
    let _to = source.readAddress();
    let _value = source.readBigNumber();
    let _mode = source.readBigNumber();
    let _body = source.readCellOpt();
    let _code = source.readCellOpt();
    let _data = source.readCellOpt();
    return { $$type: 'SendParameters' as const, bounce: _bounce, to: _to, value: _value, mode: _mode, body: _body, code: _code, data: _data };
}

function storeTupleSendParameters(source: SendParameters) {
    let builder = new TupleBuilder();
    builder.writeBoolean(source.bounce);
    builder.writeAddress(source.to);
    builder.writeNumber(source.value);
    builder.writeNumber(source.mode);
    builder.writeCell(source.body);
    builder.writeCell(source.code);
    builder.writeCell(source.data);
    return builder.build();
}

function dictValueParserSendParameters(): DictionaryValue<SendParameters> {
    return {
        serialize: (src, builder) => {
            builder.storeRef(beginCell().store(storeSendParameters(src)).endCell());
        },
        parse: (src) => {
            return loadSendParameters(src.loadRef().beginParse());
        }
    }
}

export type Deploy = {
    $$type: 'Deploy';
    queryId: bigint;
}

export function storeDeploy(src: Deploy) {
    return (builder: Builder) => {
        let b_0 = builder;
        b_0.storeUint(2490013878, 32);
        b_0.storeUint(src.queryId, 64);
    };
}

export function loadDeploy(slice: Slice) {
    let sc_0 = slice;
    if (sc_0.loadUint(32) !== 2490013878) { throw Error('Invalid prefix'); }
    let _queryId = sc_0.loadUintBig(64);
    return { $$type: 'Deploy' as const, queryId: _queryId };
}

function loadTupleDeploy(source: TupleReader) {
    let _queryId = source.readBigNumber();
    return { $$type: 'Deploy' as const, queryId: _queryId };
}

function storeTupleDeploy(source: Deploy) {
    let builder = new TupleBuilder();
    builder.writeNumber(source.queryId);
    return builder.build();
}

function dictValueParserDeploy(): DictionaryValue<Deploy> {
    return {
        serialize: (src, builder) => {
            builder.storeRef(beginCell().store(storeDeploy(src)).endCell());
        },
        parse: (src) => {
            return loadDeploy(src.loadRef().beginParse());
        }
    }
}

export type DeployOk = {
    $$type: 'DeployOk';
    queryId: bigint;
}

export function storeDeployOk(src: DeployOk) {
    return (builder: Builder) => {
        let b_0 = builder;
        b_0.storeUint(2952335191, 32);
        b_0.storeUint(src.queryId, 64);
    };
}

export function loadDeployOk(slice: Slice) {
    let sc_0 = slice;
    if (sc_0.loadUint(32) !== 2952335191) { throw Error('Invalid prefix'); }
    let _queryId = sc_0.loadUintBig(64);
    return { $$type: 'DeployOk' as const, queryId: _queryId };
}

function loadTupleDeployOk(source: TupleReader) {
    let _queryId = source.readBigNumber();
    return { $$type: 'DeployOk' as const, queryId: _queryId };
}

function storeTupleDeployOk(source: DeployOk) {
    let builder = new TupleBuilder();
    builder.writeNumber(source.queryId);
    return builder.build();
}

function dictValueParserDeployOk(): DictionaryValue<DeployOk> {
    return {
        serialize: (src, builder) => {
            builder.storeRef(beginCell().store(storeDeployOk(src)).endCell());
        },
        parse: (src) => {
            return loadDeployOk(src.loadRef().beginParse());
        }
    }
}

export type FactoryDeploy = {
    $$type: 'FactoryDeploy';
    queryId: bigint;
    cashback: Address;
}

export function storeFactoryDeploy(src: FactoryDeploy) {
    return (builder: Builder) => {
        let b_0 = builder;
        b_0.storeUint(1829761339, 32);
        b_0.storeUint(src.queryId, 64);
        b_0.storeAddress(src.cashback);
    };
}

export function loadFactoryDeploy(slice: Slice) {
    let sc_0 = slice;
    if (sc_0.loadUint(32) !== 1829761339) { throw Error('Invalid prefix'); }
    let _queryId = sc_0.loadUintBig(64);
    let _cashback = sc_0.loadAddress();
    return { $$type: 'FactoryDeploy' as const, queryId: _queryId, cashback: _cashback };
}

function loadTupleFactoryDeploy(source: TupleReader) {
    let _queryId = source.readBigNumber();
    let _cashback = source.readAddress();
    return { $$type: 'FactoryDeploy' as const, queryId: _queryId, cashback: _cashback };
}

function storeTupleFactoryDeploy(source: FactoryDeploy) {
    let builder = new TupleBuilder();
    builder.writeNumber(source.queryId);
    builder.writeAddress(source.cashback);
    return builder.build();
}

function dictValueParserFactoryDeploy(): DictionaryValue<FactoryDeploy> {
    return {
        serialize: (src, builder) => {
            builder.storeRef(beginCell().store(storeFactoryDeploy(src)).endCell());
        },
        parse: (src) => {
            return loadFactoryDeploy(src.loadRef().beginParse());
        }
    }
}

 type MathTester_init_args = {
    $$type: 'MathTester_init_args';
}

function initMathTester_init_args(src: MathTester_init_args) {
    return (builder: Builder) => {
        let b_0 = builder;
    };
}

async function MathTester_init() {
    const __code = Cell.fromBase64('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');
    const __system = Cell.fromBase64('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');
    let builder = beginCell();
    builder.storeRef(__system);
    builder.storeUint(0, 1);
    initMathTester_init_args({ $$type: 'MathTester_init_args' })(builder);
    const __data = builder.endCell();
    return { code: __code, data: __data };
}

const MathTester_errors: { [key: number]: { message: string } } = {
    2: { message: `Stack underflow` },
    3: { message: `Stack overflow` },
    4: { message: `Integer overflow` },
    5: { message: `Integer out of expected range` },
    6: { message: `Invalid opcode` },
    7: { message: `Type check error` },
    8: { message: `Cell overflow` },
    9: { message: `Cell underflow` },
    10: { message: `Dictionary error` },
    13: { message: `Out of gas error` },
    32: { message: `Method ID not found` },
    34: { message: `Action is invalid or not supported` },
    37: { message: `Not enough TON` },
    38: { message: `Not enough extra-currencies` },
    128: { message: `Null reference exception` },
    129: { message: `Invalid serialization prefix` },
    130: { message: `Invalid incoming message` },
    131: { message: `Constraints error` },
    132: { message: `Access denied` },
    133: { message: `Contract stopped` },
    134: { message: `Invalid argument` },
    135: { message: `Code of a contract was not found` },
    136: { message: `Invalid address` },
    137: { message: `Masterchain support is not enabled for this contract` },
}

const MathTester_types: ABIType[] = [
    {"name":"StateInit","header":null,"fields":[{"name":"code","type":{"kind":"simple","type":"cell","optional":false}},{"name":"data","type":{"kind":"simple","type":"cell","optional":false}}]},
    {"name":"Context","header":null,"fields":[{"name":"bounced","type":{"kind":"simple","type":"bool","optional":false}},{"name":"sender","type":{"kind":"simple","type":"address","optional":false}},{"name":"value","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"raw","type":{"kind":"simple","type":"slice","optional":false}}]},
    {"name":"SendParameters","header":null,"fields":[{"name":"bounce","type":{"kind":"simple","type":"bool","optional":false}},{"name":"to","type":{"kind":"simple","type":"address","optional":false}},{"name":"value","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"mode","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"body","type":{"kind":"simple","type":"cell","optional":true}},{"name":"code","type":{"kind":"simple","type":"cell","optional":true}},{"name":"data","type":{"kind":"simple","type":"cell","optional":true}}]},
    {"name":"Deploy","header":2490013878,"fields":[{"name":"queryId","type":{"kind":"simple","type":"uint","optional":false,"format":64}}]},
    {"name":"DeployOk","header":2952335191,"fields":[{"name":"queryId","type":{"kind":"simple","type":"uint","optional":false,"format":64}}]},
    {"name":"FactoryDeploy","header":1829761339,"fields":[{"name":"queryId","type":{"kind":"simple","type":"uint","optional":false,"format":64}},{"name":"cashback","type":{"kind":"simple","type":"address","optional":false}}]},
]

const MathTester_getters: ABIGetter[] = [
    {"name":"add","arguments":[{"name":"a","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"b","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"sub","arguments":[{"name":"a","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"b","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"mul","arguments":[{"name":"a","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"b","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"div","arguments":[{"name":"a","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"b","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"mod","arguments":[{"name":"a","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"b","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"shr","arguments":[{"name":"a","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"b","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"shl","arguments":[{"name":"a","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"b","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"and","arguments":[{"name":"a","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"b","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"or","arguments":[{"name":"a","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"b","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"xor","arguments":[{"name":"a","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"b","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"addAug","arguments":[{"name":"a","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"b","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"subAug","arguments":[{"name":"a","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"b","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"mulAug","arguments":[{"name":"a","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"b","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"divAug","arguments":[{"name":"a","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"b","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"modAug","arguments":[{"name":"a","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"b","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"compare1","arguments":[{"name":"a","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"b","type":{"kind":"simple","type":"int","optional":true,"format":257}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare2","arguments":[{"name":"a","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"b","type":{"kind":"simple","type":"int","optional":true,"format":257}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare3","arguments":[{"name":"a","type":{"kind":"simple","type":"int","optional":true,"format":257}},{"name":"b","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare4","arguments":[{"name":"a","type":{"kind":"simple","type":"int","optional":true,"format":257}},{"name":"b","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare5","arguments":[{"name":"a","type":{"kind":"simple","type":"int","optional":true,"format":257}},{"name":"b","type":{"kind":"simple","type":"int","optional":true,"format":257}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare6","arguments":[{"name":"a","type":{"kind":"simple","type":"int","optional":true,"format":257}},{"name":"b","type":{"kind":"simple","type":"int","optional":true,"format":257}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare7","arguments":[{"name":"a","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"b","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare8","arguments":[{"name":"a","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"b","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare9","arguments":[{"name":"a","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"b","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare10","arguments":[{"name":"a","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"b","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare11","arguments":[{"name":"a","type":{"kind":"simple","type":"address","optional":false}},{"name":"b","type":{"kind":"simple","type":"address","optional":false}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare12","arguments":[{"name":"a","type":{"kind":"simple","type":"address","optional":false}},{"name":"b","type":{"kind":"simple","type":"address","optional":true}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare13","arguments":[{"name":"a","type":{"kind":"simple","type":"address","optional":true}},{"name":"b","type":{"kind":"simple","type":"address","optional":false}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare14","arguments":[{"name":"a","type":{"kind":"simple","type":"address","optional":true}},{"name":"b","type":{"kind":"simple","type":"address","optional":true}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare15","arguments":[{"name":"a","type":{"kind":"simple","type":"address","optional":false}},{"name":"b","type":{"kind":"simple","type":"address","optional":false}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare16","arguments":[{"name":"a","type":{"kind":"simple","type":"address","optional":false}},{"name":"b","type":{"kind":"simple","type":"address","optional":true}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare17","arguments":[{"name":"a","type":{"kind":"simple","type":"address","optional":true}},{"name":"b","type":{"kind":"simple","type":"address","optional":false}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare18","arguments":[{"name":"a","type":{"kind":"simple","type":"address","optional":true}},{"name":"b","type":{"kind":"simple","type":"address","optional":true}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare19","arguments":[{"name":"a","type":{"kind":"simple","type":"cell","optional":false}},{"name":"b","type":{"kind":"simple","type":"cell","optional":false}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare20","arguments":[{"name":"a","type":{"kind":"simple","type":"cell","optional":false}},{"name":"b","type":{"kind":"simple","type":"cell","optional":true}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare21","arguments":[{"name":"a","type":{"kind":"simple","type":"cell","optional":true}},{"name":"b","type":{"kind":"simple","type":"cell","optional":false}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare22","arguments":[{"name":"a","type":{"kind":"simple","type":"cell","optional":true}},{"name":"b","type":{"kind":"simple","type":"cell","optional":true}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare23","arguments":[{"name":"a","type":{"kind":"simple","type":"cell","optional":false}},{"name":"b","type":{"kind":"simple","type":"cell","optional":false}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare24","arguments":[{"name":"a","type":{"kind":"simple","type":"cell","optional":false}},{"name":"b","type":{"kind":"simple","type":"cell","optional":true}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare25","arguments":[{"name":"a","type":{"kind":"simple","type":"cell","optional":true}},{"name":"b","type":{"kind":"simple","type":"cell","optional":false}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare26","arguments":[{"name":"a","type":{"kind":"simple","type":"cell","optional":true}},{"name":"b","type":{"kind":"simple","type":"cell","optional":true}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare27","arguments":[{"name":"a","type":{"kind":"dict","key":"int","value":"int"}},{"name":"b","type":{"kind":"dict","key":"int","value":"int"}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare28","arguments":[{"name":"a","type":{"kind":"dict","key":"int","value":"int"}},{"name":"b","type":{"kind":"dict","key":"int","value":"int"}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare29","arguments":[{"name":"a","type":{"kind":"simple","type":"slice","optional":false}},{"name":"b","type":{"kind":"simple","type":"slice","optional":false}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare30","arguments":[{"name":"a","type":{"kind":"simple","type":"slice","optional":false}},{"name":"b","type":{"kind":"simple","type":"slice","optional":true}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare31","arguments":[{"name":"a","type":{"kind":"simple","type":"slice","optional":true}},{"name":"b","type":{"kind":"simple","type":"slice","optional":false}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare32","arguments":[{"name":"a","type":{"kind":"simple","type":"slice","optional":true}},{"name":"b","type":{"kind":"simple","type":"slice","optional":true}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare33","arguments":[{"name":"a","type":{"kind":"simple","type":"slice","optional":false}},{"name":"b","type":{"kind":"simple","type":"slice","optional":false}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare34","arguments":[{"name":"a","type":{"kind":"simple","type":"slice","optional":false}},{"name":"b","type":{"kind":"simple","type":"slice","optional":true}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare35","arguments":[{"name":"a","type":{"kind":"simple","type":"slice","optional":true}},{"name":"b","type":{"kind":"simple","type":"slice","optional":false}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare36","arguments":[{"name":"a","type":{"kind":"simple","type":"slice","optional":true}},{"name":"b","type":{"kind":"simple","type":"slice","optional":true}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare37","arguments":[{"name":"a","type":{"kind":"simple","type":"string","optional":false}},{"name":"b","type":{"kind":"simple","type":"string","optional":false}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare38","arguments":[{"name":"a","type":{"kind":"simple","type":"string","optional":false}},{"name":"b","type":{"kind":"simple","type":"string","optional":true}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare39","arguments":[{"name":"a","type":{"kind":"simple","type":"string","optional":true}},{"name":"b","type":{"kind":"simple","type":"string","optional":false}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare40","arguments":[{"name":"a","type":{"kind":"simple","type":"string","optional":true}},{"name":"b","type":{"kind":"simple","type":"string","optional":true}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare41","arguments":[{"name":"a","type":{"kind":"simple","type":"string","optional":false}},{"name":"b","type":{"kind":"simple","type":"string","optional":false}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare42","arguments":[{"name":"a","type":{"kind":"simple","type":"string","optional":false}},{"name":"b","type":{"kind":"simple","type":"string","optional":true}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare43","arguments":[{"name":"a","type":{"kind":"simple","type":"string","optional":true}},{"name":"b","type":{"kind":"simple","type":"string","optional":false}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare44","arguments":[{"name":"a","type":{"kind":"simple","type":"string","optional":true}},{"name":"b","type":{"kind":"simple","type":"string","optional":true}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"isNull1","arguments":[{"name":"a","type":{"kind":"simple","type":"int","optional":true,"format":257}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"isNotNull1","arguments":[{"name":"a","type":{"kind":"simple","type":"int","optional":true,"format":257}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"isNull2","arguments":[{"name":"address","type":{"kind":"simple","type":"address","optional":true}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"isNotNull2","arguments":[{"name":"address","type":{"kind":"simple","type":"address","optional":true}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"isNull3","arguments":[{"name":"cell","type":{"kind":"simple","type":"cell","optional":true}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"isNotNull3","arguments":[{"name":"cell","type":{"kind":"simple","type":"cell","optional":true}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"log2","arguments":[{"name":"num","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"log","arguments":[{"name":"num","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"base","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"pow","arguments":[{"name":"base","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"exp","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"pow2","arguments":[{"name":"exp","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"precedence1","arguments":[],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"precedence2","arguments":[],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"precedence3","arguments":[],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"precedence4","arguments":[],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"precedence5","arguments":[],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"precedence6","arguments":[],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"precedence7","arguments":[],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"precedence8","arguments":[],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"precedence9","arguments":[],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"precedence10","arguments":[],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"precedence11","arguments":[],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"precedence12","arguments":[],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
]

const MathTester_receivers: ABIReceiver[] = [
    {"receiver":"internal","message":{"kind":"typed","type":"Deploy"}},
]

export class MathTester implements Contract {
    
    static async init() {
        return await MathTester_init();
    }
    
    static async fromInit() {
        const init = await MathTester_init();
        const address = contractAddress(0, init);
        return new MathTester(address, init);
    }
    
    static fromAddress(address: Address) {
        return new MathTester(address);
    }
    
    readonly address: Address; 
    readonly init?: { code: Cell, data: Cell };
    readonly abi: ContractABI = {
        types:  MathTester_types,
        getters: MathTester_getters,
        receivers: MathTester_receivers,
        errors: MathTester_errors,
    };
    
    private constructor(address: Address, init?: { code: Cell, data: Cell }) {
        this.address = address;
        this.init = init;
    }
    
    async send(provider: ContractProvider, via: Sender, args: { value: bigint, bounce?: boolean| null | undefined }, message: Deploy) {
        
        let body: Cell | null = null;
        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'Deploy') {
            body = beginCell().store(storeDeploy(message)).endCell();
        }
        if (body === null) { throw new Error('Invalid message type'); }
        
        await provider.internal(via, { ...args, body: body });
        
    }
    
    async getAdd(provider: ContractProvider, a: bigint, b: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(a);
        builder.writeNumber(b);
        let source = (await provider.get('add', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getSub(provider: ContractProvider, a: bigint, b: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(a);
        builder.writeNumber(b);
        let source = (await provider.get('sub', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getMul(provider: ContractProvider, a: bigint, b: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(a);
        builder.writeNumber(b);
        let source = (await provider.get('mul', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getDiv(provider: ContractProvider, a: bigint, b: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(a);
        builder.writeNumber(b);
        let source = (await provider.get('div', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getMod(provider: ContractProvider, a: bigint, b: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(a);
        builder.writeNumber(b);
        let source = (await provider.get('mod', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getShr(provider: ContractProvider, a: bigint, b: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(a);
        builder.writeNumber(b);
        let source = (await provider.get('shr', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getShl(provider: ContractProvider, a: bigint, b: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(a);
        builder.writeNumber(b);
        let source = (await provider.get('shl', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getAnd(provider: ContractProvider, a: bigint, b: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(a);
        builder.writeNumber(b);
        let source = (await provider.get('and', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getOr(provider: ContractProvider, a: bigint, b: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(a);
        builder.writeNumber(b);
        let source = (await provider.get('or', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getXor(provider: ContractProvider, a: bigint, b: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(a);
        builder.writeNumber(b);
        let source = (await provider.get('xor', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getAddAug(provider: ContractProvider, a: bigint, b: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(a);
        builder.writeNumber(b);
        let source = (await provider.get('addAug', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getSubAug(provider: ContractProvider, a: bigint, b: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(a);
        builder.writeNumber(b);
        let source = (await provider.get('subAug', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getMulAug(provider: ContractProvider, a: bigint, b: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(a);
        builder.writeNumber(b);
        let source = (await provider.get('mulAug', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getDivAug(provider: ContractProvider, a: bigint, b: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(a);
        builder.writeNumber(b);
        let source = (await provider.get('divAug', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getModAug(provider: ContractProvider, a: bigint, b: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(a);
        builder.writeNumber(b);
        let source = (await provider.get('modAug', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getCompare1(provider: ContractProvider, a: bigint, b: bigint | null) {
        let builder = new TupleBuilder();
        builder.writeNumber(a);
        builder.writeNumber(b);
        let source = (await provider.get('compare1', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare2(provider: ContractProvider, a: bigint, b: bigint | null) {
        let builder = new TupleBuilder();
        builder.writeNumber(a);
        builder.writeNumber(b);
        let source = (await provider.get('compare2', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare3(provider: ContractProvider, a: bigint | null, b: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(a);
        builder.writeNumber(b);
        let source = (await provider.get('compare3', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare4(provider: ContractProvider, a: bigint | null, b: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(a);
        builder.writeNumber(b);
        let source = (await provider.get('compare4', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare5(provider: ContractProvider, a: bigint | null, b: bigint | null) {
        let builder = new TupleBuilder();
        builder.writeNumber(a);
        builder.writeNumber(b);
        let source = (await provider.get('compare5', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare6(provider: ContractProvider, a: bigint | null, b: bigint | null) {
        let builder = new TupleBuilder();
        builder.writeNumber(a);
        builder.writeNumber(b);
        let source = (await provider.get('compare6', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare7(provider: ContractProvider, a: bigint, b: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(a);
        builder.writeNumber(b);
        let source = (await provider.get('compare7', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare8(provider: ContractProvider, a: bigint, b: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(a);
        builder.writeNumber(b);
        let source = (await provider.get('compare8', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare9(provider: ContractProvider, a: bigint, b: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(a);
        builder.writeNumber(b);
        let source = (await provider.get('compare9', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare10(provider: ContractProvider, a: bigint, b: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(a);
        builder.writeNumber(b);
        let source = (await provider.get('compare10', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare11(provider: ContractProvider, a: Address, b: Address) {
        let builder = new TupleBuilder();
        builder.writeAddress(a);
        builder.writeAddress(b);
        let source = (await provider.get('compare11', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare12(provider: ContractProvider, a: Address, b: Address | null) {
        let builder = new TupleBuilder();
        builder.writeAddress(a);
        builder.writeAddress(b);
        let source = (await provider.get('compare12', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare13(provider: ContractProvider, a: Address | null, b: Address) {
        let builder = new TupleBuilder();
        builder.writeAddress(a);
        builder.writeAddress(b);
        let source = (await provider.get('compare13', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare14(provider: ContractProvider, a: Address | null, b: Address | null) {
        let builder = new TupleBuilder();
        builder.writeAddress(a);
        builder.writeAddress(b);
        let source = (await provider.get('compare14', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare15(provider: ContractProvider, a: Address, b: Address) {
        let builder = new TupleBuilder();
        builder.writeAddress(a);
        builder.writeAddress(b);
        let source = (await provider.get('compare15', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare16(provider: ContractProvider, a: Address, b: Address | null) {
        let builder = new TupleBuilder();
        builder.writeAddress(a);
        builder.writeAddress(b);
        let source = (await provider.get('compare16', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare17(provider: ContractProvider, a: Address | null, b: Address) {
        let builder = new TupleBuilder();
        builder.writeAddress(a);
        builder.writeAddress(b);
        let source = (await provider.get('compare17', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare18(provider: ContractProvider, a: Address | null, b: Address | null) {
        let builder = new TupleBuilder();
        builder.writeAddress(a);
        builder.writeAddress(b);
        let source = (await provider.get('compare18', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare19(provider: ContractProvider, a: Cell, b: Cell) {
        let builder = new TupleBuilder();
        builder.writeCell(a);
        builder.writeCell(b);
        let source = (await provider.get('compare19', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare20(provider: ContractProvider, a: Cell, b: Cell | null) {
        let builder = new TupleBuilder();
        builder.writeCell(a);
        builder.writeCell(b);
        let source = (await provider.get('compare20', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare21(provider: ContractProvider, a: Cell | null, b: Cell) {
        let builder = new TupleBuilder();
        builder.writeCell(a);
        builder.writeCell(b);
        let source = (await provider.get('compare21', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare22(provider: ContractProvider, a: Cell | null, b: Cell | null) {
        let builder = new TupleBuilder();
        builder.writeCell(a);
        builder.writeCell(b);
        let source = (await provider.get('compare22', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare23(provider: ContractProvider, a: Cell, b: Cell) {
        let builder = new TupleBuilder();
        builder.writeCell(a);
        builder.writeCell(b);
        let source = (await provider.get('compare23', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare24(provider: ContractProvider, a: Cell, b: Cell | null) {
        let builder = new TupleBuilder();
        builder.writeCell(a);
        builder.writeCell(b);
        let source = (await provider.get('compare24', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare25(provider: ContractProvider, a: Cell | null, b: Cell) {
        let builder = new TupleBuilder();
        builder.writeCell(a);
        builder.writeCell(b);
        let source = (await provider.get('compare25', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare26(provider: ContractProvider, a: Cell | null, b: Cell | null) {
        let builder = new TupleBuilder();
        builder.writeCell(a);
        builder.writeCell(b);
        let source = (await provider.get('compare26', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare27(provider: ContractProvider, a: Dictionary<bigint, bigint>, b: Dictionary<bigint, bigint>) {
        let builder = new TupleBuilder();
        builder.writeCell(a.size > 0 ? beginCell().storeDictDirect(a, Dictionary.Keys.BigInt(257), Dictionary.Values.BigInt(257)).endCell() : null);
        builder.writeCell(b.size > 0 ? beginCell().storeDictDirect(b, Dictionary.Keys.BigInt(257), Dictionary.Values.BigInt(257)).endCell() : null);
        let source = (await provider.get('compare27', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare28(provider: ContractProvider, a: Dictionary<bigint, bigint>, b: Dictionary<bigint, bigint>) {
        let builder = new TupleBuilder();
        builder.writeCell(a.size > 0 ? beginCell().storeDictDirect(a, Dictionary.Keys.BigInt(257), Dictionary.Values.BigInt(257)).endCell() : null);
        builder.writeCell(b.size > 0 ? beginCell().storeDictDirect(b, Dictionary.Keys.BigInt(257), Dictionary.Values.BigInt(257)).endCell() : null);
        let source = (await provider.get('compare28', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare29(provider: ContractProvider, a: Cell, b: Cell) {
        let builder = new TupleBuilder();
        builder.writeSlice(a);
        builder.writeSlice(b);
        let source = (await provider.get('compare29', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare30(provider: ContractProvider, a: Cell, b: Cell | null) {
        let builder = new TupleBuilder();
        builder.writeSlice(a);
        builder.writeSlice(b);
        let source = (await provider.get('compare30', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare31(provider: ContractProvider, a: Cell | null, b: Cell) {
        let builder = new TupleBuilder();
        builder.writeSlice(a);
        builder.writeSlice(b);
        let source = (await provider.get('compare31', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare32(provider: ContractProvider, a: Cell | null, b: Cell | null) {
        let builder = new TupleBuilder();
        builder.writeSlice(a);
        builder.writeSlice(b);
        let source = (await provider.get('compare32', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare33(provider: ContractProvider, a: Cell, b: Cell) {
        let builder = new TupleBuilder();
        builder.writeSlice(a);
        builder.writeSlice(b);
        let source = (await provider.get('compare33', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare34(provider: ContractProvider, a: Cell, b: Cell | null) {
        let builder = new TupleBuilder();
        builder.writeSlice(a);
        builder.writeSlice(b);
        let source = (await provider.get('compare34', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare35(provider: ContractProvider, a: Cell | null, b: Cell) {
        let builder = new TupleBuilder();
        builder.writeSlice(a);
        builder.writeSlice(b);
        let source = (await provider.get('compare35', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare36(provider: ContractProvider, a: Cell | null, b: Cell | null) {
        let builder = new TupleBuilder();
        builder.writeSlice(a);
        builder.writeSlice(b);
        let source = (await provider.get('compare36', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare37(provider: ContractProvider, a: string, b: string) {
        let builder = new TupleBuilder();
        builder.writeString(a);
        builder.writeString(b);
        let source = (await provider.get('compare37', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare38(provider: ContractProvider, a: string, b: string | null) {
        let builder = new TupleBuilder();
        builder.writeString(a);
        builder.writeString(b);
        let source = (await provider.get('compare38', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare39(provider: ContractProvider, a: string | null, b: string) {
        let builder = new TupleBuilder();
        builder.writeString(a);
        builder.writeString(b);
        let source = (await provider.get('compare39', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare40(provider: ContractProvider, a: string | null, b: string | null) {
        let builder = new TupleBuilder();
        builder.writeString(a);
        builder.writeString(b);
        let source = (await provider.get('compare40', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare41(provider: ContractProvider, a: string, b: string) {
        let builder = new TupleBuilder();
        builder.writeString(a);
        builder.writeString(b);
        let source = (await provider.get('compare41', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare42(provider: ContractProvider, a: string, b: string | null) {
        let builder = new TupleBuilder();
        builder.writeString(a);
        builder.writeString(b);
        let source = (await provider.get('compare42', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare43(provider: ContractProvider, a: string | null, b: string) {
        let builder = new TupleBuilder();
        builder.writeString(a);
        builder.writeString(b);
        let source = (await provider.get('compare43', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare44(provider: ContractProvider, a: string | null, b: string | null) {
        let builder = new TupleBuilder();
        builder.writeString(a);
        builder.writeString(b);
        let source = (await provider.get('compare44', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getIsNull1(provider: ContractProvider, a: bigint | null) {
        let builder = new TupleBuilder();
        builder.writeNumber(a);
        let source = (await provider.get('isNull1', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getIsNotNull1(provider: ContractProvider, a: bigint | null) {
        let builder = new TupleBuilder();
        builder.writeNumber(a);
        let source = (await provider.get('isNotNull1', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getIsNull2(provider: ContractProvider, address: Address | null) {
        let builder = new TupleBuilder();
        builder.writeAddress(address);
        let source = (await provider.get('isNull2', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getIsNotNull2(provider: ContractProvider, address: Address | null) {
        let builder = new TupleBuilder();
        builder.writeAddress(address);
        let source = (await provider.get('isNotNull2', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getIsNull3(provider: ContractProvider, cell: Cell | null) {
        let builder = new TupleBuilder();
        builder.writeCell(cell);
        let source = (await provider.get('isNull3', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getIsNotNull3(provider: ContractProvider, cell: Cell | null) {
        let builder = new TupleBuilder();
        builder.writeCell(cell);
        let source = (await provider.get('isNotNull3', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getLog2(provider: ContractProvider, num: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(num);
        let source = (await provider.get('log2', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getLog(provider: ContractProvider, num: bigint, base: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(num);
        builder.writeNumber(base);
        let source = (await provider.get('log', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getPow(provider: ContractProvider, base: bigint, exp: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(base);
        builder.writeNumber(exp);
        let source = (await provider.get('pow', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getPow2(provider: ContractProvider, exp: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(exp);
        let source = (await provider.get('pow2', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getPrecedence1(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('precedence1', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getPrecedence2(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('precedence2', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getPrecedence3(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('precedence3', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getPrecedence4(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('precedence4', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getPrecedence5(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('precedence5', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getPrecedence6(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('precedence6', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getPrecedence7(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('precedence7', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getPrecedence8(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('precedence8', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getPrecedence9(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('precedence9', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getPrecedence10(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('precedence10', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getPrecedence11(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('precedence11', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getPrecedence12(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('precedence12', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
}