#pragma version =0.4.4;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "recursion_RecursionTester.headers.fc";
#include "recursion_RecursionTester.stdlib.fc";
#include "recursion_RecursionTester.storage.fc";

;;
;; Contract RecursionTester functions
;;

tuple $RecursionTester$_contract_init() impure inline_ref {
    tuple $self = null();
    return $self;
}

int $global_factorial(int $n) impure inline_ref {
    if (($n == 0)) {
        return 1;
    }
    return ($n * $global_factorial(($n - 1)));
}

(tuple, int) $RecursionTester$_fun_fib(tuple $self, int $n) impure inline_ref {
    var ($self) = $self;
    if (($n <= 0)) {
        return ($self, 0);
    }
    if (($n == 1)) {
        return ($self, 1);
    }
    return ($self, ($self~$RecursionTester$_fun_fib(($n - 1)) + $self~$RecursionTester$_fun_fib(($n - 2))));
}

(tuple, int) $RecursionTester$_fun_fact(tuple $self, int $n) impure inline_ref {
    var ($self) = $self;
    return ($self, $global_factorial($n));
}

;;
;; Receivers of a Contract RecursionTester
;;

((tuple), ()) $RecursionTester$_internal_binary_Deploy(tuple $self, (int) $deploy) impure inline {
    var $self = $self;
    var ($deploy'queryId) = $deploy;
    $self~$RecursionTester$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return ($self, ());
}

;;
;; Get methods of a Contract RecursionTester
;;

_ %fib(int $$n) method_id(119965) {
    int $n = $$n;
    var self = $RecursionTester$_contract_load();
    var res = self~$RecursionTester$_fun_fib($n);
    return res;
}

_ %fact(int $$n) method_id(111226) {
    int $n = $$n;
    var self = $RecursionTester$_contract_load();
    var res = self~$RecursionTester$_fun_fact($n);
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.debug.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmVXJTJFu14Q8tTqYHxhAVrpkGeyu7CQfnFnhYXhvGRUtZ";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract RecursionTester
;;

(tuple, int) $RecursionTester$_contract_router_internal(tuple self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$RecursionTester$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $RecursionTester$_contract_load();
    
    ;; Handle operation
    int handled = self~$RecursionTester$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $RecursionTester$_contract_store(self);
}
