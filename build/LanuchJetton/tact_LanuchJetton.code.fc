#pragma version =0.4.4;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "tact_LanuchJetton.headers.fc";
#include "tact_LanuchJetton.stdlib.fc";
#include "tact_LanuchJetton.constants.fc";
#include "tact_LanuchJetton.storage.fc";

;;
;; Contract LanuchJetton functions
;;

(slice, int, slice, int, int, slice, int) $LanuchJetton$_contract_init(slice $owner, int $fee, int $isLanuch) impure inline_ref {
    var (($self'owner, $self'fee, $self'testAddress, $self'hasminted, $self'isLanuch, $self'lanuchJettonAddress, $self'this_balance)) = (null(), null(), null(), null(), null(), null(), null());
    $self'owner = $owner;
    $self'fee = $fee;
    $self'testAddress = __tact_create_address(0, 0);
    $self'hasminted = false;
    $self'isLanuch = $isLanuch;
    $self'lanuchJettonAddress = my_address();
    $self'this_balance = 0;
    return ($self'owner, $self'fee, $self'testAddress, $self'hasminted, $self'isLanuch, $self'lanuchJettonAddress, $self'this_balance);
}

((slice, int, slice, int, int, slice, int), ()) $LanuchJetton$_fun_sendMemeToPair((slice, int, slice, int, int, slice, int) $self, (slice, slice, int, int, slice) $config, int $tokenAmount, int $minLPOut) impure inline_ref {
    var (($self'owner, $self'fee, $self'testAddress, $self'hasminted, $self'isLanuch, $self'lanuchJettonAddress, $self'this_balance)) = $self;
    var (($config'swapRouterAddress, $config'proxyTon, $config'tonValueAddMeme, $config'tonValueAddPton, $config'routerPtonWallet)) = $config;
    var ($init'code, $init'data) = $JettonDefaultWallet$_init_child(__tact_context_sys, my_address(), my_address());
    slice $memeJettonWallet = $global_contractAddress(($init'code, $init'data));
    cell $c = $StonfiProvideLiquidity$_store_cell($StonfiProvideLiquidity$_constructor_token_wallet_min_lp_out($config'routerPtonWallet, $minLPOut));
    cell $forward_cell = end_cell(store_ref(store_uint(begin_cell(), 1, 1), $c));
    $global_send($SendParameters$_constructor_to_bounce_value_mode_body_code_data($memeJettonWallet, true, 0, 2, $TokenTransfer$_store_cell($TokenTransfer$_constructor_query_id_amount_sender_response_destination_custom_payload_forward_ton_amount_forward_payload(0, $tokenAmount, $config'swapRouterAddress, my_address(), null(), 240000000, $Cell$_fun_asSlice($forward_cell))), $init'code, $init'data));
    return (($self'owner, $self'fee, $self'testAddress, $self'hasminted, $self'isLanuch, $self'lanuchJettonAddress, $self'this_balance), ());
}

((slice, int, slice, int, int, slice, int), ()) $LanuchJetton$_fun_sendTonToPair((slice, int, slice, int, int, slice, int) $self, (slice, slice, int, int, slice) $config, int $tonAmount, int $min_lp_out) impure inline_ref {
    var (($self'owner, $self'fee, $self'testAddress, $self'hasminted, $self'isLanuch, $self'lanuchJettonAddress, $self'this_balance)) = $self;
    var (($config'swapRouterAddress, $config'proxyTon, $config'tonValueAddMeme, $config'tonValueAddPton, $config'routerPtonWallet)) = $config;
    var ($init'code, $init'data) = $JettonDefaultWallet$_init_child(__tact_context_sys, $config'swapRouterAddress, my_address());
    slice $memeJettonWallet = $global_contractAddress(($init'code, $init'data));
    cell $c = $StonfiProvideLiquidity$_store_cell($StonfiProvideLiquidity$_constructor_token_wallet_min_lp_out($memeJettonWallet, $min_lp_out));
    cell $forward_cell = end_cell(store_ref(store_uint(begin_cell(), 1, 1), $c));
    $global_send($SendParameters$_constructor_to_bounce_value_mode_body($config'routerPtonWallet, false, 0, (64 | 2), $TokenTransfer$_store_cell($TokenTransfer$_constructor_query_id_amount_sender_response_destination_custom_payload_forward_ton_amount_forward_payload(0, $tonAmount, $config'swapRouterAddress, null(), null(), 260000000, $Cell$_fun_asSlice($forward_cell)))));
    return (($self'owner, $self'fee, $self'testAddress, $self'hasminted, $self'isLanuch, $self'lanuchJettonAddress, $self'this_balance), ());
}

((slice, int, slice, int, int, slice, int), ()) $LanuchJetton$_fun_lanuchfee((slice, int, slice, int, int, slice, int) $self, int $fee) impure inline_ref {
    var (($self'owner, $self'fee, $self'testAddress, $self'hasminted, $self'isLanuch, $self'lanuchJettonAddress, $self'this_balance)) = $self;
    $global_send($SendParameters$_constructor_to_value_mode_body($self'owner, $fee, 2, __gen_cell_comment_a1ff8aed5feb8f5d0fe20f6c7d3e8e1d99050dae9fd2a677ab67a0a7c2769e2f()));
    return (($self'owner, $self'fee, $self'testAddress, $self'hasminted, $self'isLanuch, $self'lanuchJettonAddress, $self'this_balance), ());
}

((slice, int, slice, int, int, slice, int), (int, slice, slice, int)) $LanuchJetton$_fun_get_lanuchjetton_data((slice, int, slice, int, int, slice, int) $self) impure inline_ref {
    var (($self'owner, $self'fee, $self'testAddress, $self'hasminted, $self'isLanuch, $self'lanuchJettonAddress, $self'this_balance)) = $self;
    return (($self'owner, $self'fee, $self'testAddress, $self'hasminted, $self'isLanuch, $self'lanuchJettonAddress, $self'this_balance), $ContractInformation$_constructor_fee_owner_testAddress_hasminted($self'fee, $self'owner, $self'testAddress, $self'hasminted));
}

;;
;; Receivers of a Contract LanuchJetton
;;

(((slice, int, slice, int, int, slice, int)), ()) $LanuchJetton$_internal_binary_CreateNewJetton((slice, int, slice, int, int, slice, int) $self, (slice, cell, int, int, int, int, (slice, slice, int, int, slice)) $msg) impure inline {
    var ($self'owner, $self'fee, $self'testAddress, $self'hasminted, $self'isLanuch, $self'lanuchJettonAddress, $self'this_balance) = $self;
    var ($msg'token_owner, $msg'content, $msg'max_supply, $msg'rate, $msg'lanuch_rate, $msg'isLanuch, ($msg'config'swapRouterAddress, $msg'config'proxyTon, $msg'config'tonValueAddMeme, $msg'config'tonValueAddPton, $msg'config'routerPtonWallet)) = $msg;
    throw_unless(29786, ((($msg'rate % 100) + ($msg'lanuch_rate % 100)) <= 100));
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    throw_unless(63257, ($ctx'value > 200000000));
    int $fee = $self'fee;
    ($self'owner, $self'fee, $self'testAddress, $self'hasminted, $self'isLanuch, $self'lanuchJettonAddress, $self'this_balance)~$LanuchJetton$_fun_lanuchfee($fee);
    $self'this_balance = ($ctx'value - $fee);
    throw_unless(63257, ($self'this_balance > 100000000));
    var ($newJetton'code, $newJetton'data) = $SampleJetton$_init_child(__tact_context_sys, $msg'token_owner, $msg'content, $msg'max_supply, $msg'rate, my_address());
    slice $newJetton_address = $global_contractAddress(($newJetton'code, $newJetton'data));
    $self'testAddress = $global_contractAddress(($newJetton'code, $newJetton'data));
    if ((($msg'rate % 100) == 0)) {
        int $createAmount = 0;
    } else {
        int $createAmount = ($msg'max_supply * ($msg'rate % 100));
    }
    if ((($msg'rate % 100) != 0)) {
        $global_send($SendParameters$_constructor_to_value_mode_bounce_body_code_data($newJetton_address, 100000000, 0, false, $CreateNewJettonMint$_store_cell($CreateNewJettonMint$_constructor_amount_receiver(((($msg'rate % 100) == 0) ? 0 : ($msg'max_supply * ($msg'rate % 100))), $ctx'sender)), $newJetton'code, $newJetton'data));
    }
    int $lanuchJettonAmount = (($msg'max_supply * ($msg'lanuch_rate % 100)) / 100);
    if ($msg'isLanuch) {
        $global_send($SendParameters$_constructor_to_value_mode_bounce_body($newJetton_address, 0, 0, false, $Mint$_store_cell($Mint$_constructor_amount_receiver($lanuchJettonAmount, my_address()))));
        ($self'owner, $self'fee, $self'testAddress, $self'hasminted, $self'isLanuch, $self'lanuchJettonAddress, $self'this_balance)~$LanuchJetton$_fun_sendTonToPair(($msg'config'swapRouterAddress, $msg'config'proxyTon, $msg'config'tonValueAddMeme, $msg'config'tonValueAddPton, $msg'config'routerPtonWallet), $self'this_balance, 1);
        ($self'owner, $self'fee, $self'testAddress, $self'hasminted, $self'isLanuch, $self'lanuchJettonAddress, $self'this_balance)~$LanuchJetton$_fun_sendMemeToPair(($msg'config'swapRouterAddress, $msg'config'proxyTon, $msg'config'tonValueAddMeme, $msg'config'tonValueAddPton, $msg'config'routerPtonWallet), $lanuchJettonAmount, 1);
    }
    return (($self'owner, $self'fee, $self'testAddress, $self'hasminted, $self'isLanuch, $self'lanuchJettonAddress, $self'this_balance), ());
}

(((slice, int, slice, int, int, slice, int)), ()) $LanuchJetton$_internal_binary_Deploy((slice, int, slice, int, int, slice, int) $self, (int) $deploy) impure inline {
    var ($self'owner, $self'fee, $self'testAddress, $self'hasminted, $self'isLanuch, $self'lanuchJettonAddress, $self'this_balance) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'owner, $self'fee, $self'testAddress, $self'hasminted, $self'isLanuch, $self'lanuchJettonAddress, $self'this_balance)~$LanuchJetton$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'owner, $self'fee, $self'testAddress, $self'hasminted, $self'isLanuch, $self'lanuchJettonAddress, $self'this_balance), ());
}

;;
;; Get methods of a Contract LanuchJetton
;;

_ %get_lanuchjetton_data() method_id(129101) {
    var self = $LanuchJetton$_contract_load();
    var res = self~$LanuchJetton$_fun_get_lanuchjetton_data();
    return $ContractInformation$_to_external(res);
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.debug.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmWoMhVRFQmb14GpQtZD1jaghnUGBSBc3Dt2XXCFFpfLRr";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract LanuchJetton
;;

((slice, int, slice, int, int, slice, int), int) $LanuchJetton$_contract_router_internal((slice, int, slice, int, int, slice, int) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive CreateNewJetton message
    if (op == 1019513059) {
        var msg = in_msg~$CreateNewJetton$_load();
        self~$LanuchJetton$_internal_binary_CreateNewJetton(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$LanuchJetton$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $LanuchJetton$_contract_load();
    
    ;; Handle operation
    int handled = self~$LanuchJetton$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $LanuchJetton$_contract_store(self);
}
